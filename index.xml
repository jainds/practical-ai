<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Piyush&#39;s Blog</title>
<link>https://piyush.dev/</link>
<atom:link href="https://piyush.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.30</generator>
<lastBuildDate>Wed, 07 May 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Mysterious Databricks Bundle, DBT, GitHub Actions, and a Misleading Error</title>
  <link>https://piyush.dev/posts/2025-05-07-Databricks-CLI-Github-Actions.html</link>
  <description><![CDATA[ 





<p>You know how some days you just bang your head against the wall for hours over something that turns out to be deceptively simple? Yeah, that was me.</p>
<p>I spent a <em>whole day</em> wrestling with a <code>databricks.yml</code> file. The mission, should I choose to accept it (and I did, albeit unknowingly at the start of the day), was to get our Databricks Asset Bundle – which was all nicely configured to build, run, and test our DBT models – to play nice with a GitHub Actions pipeline.</p>
<p>We’d already done our homework, or so I thought. The bundle was validated, we did a test deployment using the local Databricks CLI, and everything looked golden. The goal was CI/CD automation: push code, and let GitHub Actions handle the deployment to Databricks. Standard MLOps, data engineering goodness. You can find more about <a href="https://docs.databricks.com/en/dev-tools/bundles/index.html">Databricks Asset Bundles here</a> – they’re Databricks’ way of packaging up all your project files. And <a href="https://www.getdbt.com/">DBT (Data Build Tool)</a>, of course, is awesome for transforming data in your warehouse.</p>
<section id="the-error-that-sent-me-down-a-rabbit-hole" class="level3">
<h3 class="anchored" data-anchor-id="the-error-that-sent-me-down-a-rabbit-hole">The Error That Sent Me Down a Rabbit Hole</h3>
<p>Alright, so let’s get to the villain of our story. Every time the GitHub Action kicked off the deployment, we’d get smacked with this error from the Databricks CLI:</p>
<pre class="shell"><code>186  Starting resource deployment
187 Error: terraform apply: exit status 1
188 Error: cannot create job: An environment is required for serverless task dbt_marts. Please define one using `environments` and `environment_key`.For more details, please refer to the API documentation at [https://docs.databricks.com/api/workspace/jobs/create](https://docs.databricks.com/api/workspace/jobs/create)
189   with databricks_job.dbt_marts_job,
190   on bundle.tf.json line 39, in resource.databricks_job.dbt_marts_job:
191   39:         }</code></pre>
<p>Now, if you’ve dabbled with Databricks Bundles, you’ll know they often compile down to Terraform under the hood for the deployment part. So, seeing <code>terraform apply: exit status 1</code> and the reference to <code>bundle.tf.json</code> immediately makes you think, “Ah, a Terraform issue!” The message itself, “An environment is required for serverless task dbt_marts. Please define one using <code>environments</code> and <code>environment_key</code>,” seems pretty darn explicit, doesn’t it? It’s pointing directly at the job definition for a task named <code>dbt_marts</code>.</p>
<p>My brain went straight to the <code>databricks.yml</code> file. This is where you define your resources, jobs, and, importantly, <code>environments</code> for things like serverless compute.</p>
</section>
<section id="the-wild-goose-chase-aka-debugging-steps" class="level3">
<h3 class="anchored" data-anchor-id="the-wild-goose-chase-aka-debugging-steps">The Wild Goose Chase (aka Debugging Steps)</h3>
<p>Based on that error, we dove headfirst into troubleshooting the <code>databricks.yml</code> and the Terraform configuration:</p>
<ol type="1">
<li><strong>Checked <code>environments</code></strong>: We meticulously ensured the <code>environments</code> block in our <code>databricks.yml</code> was correctly populated. We double-checked, triple-checked. I had my lunch with environment and environment keys today.</li>
<li><strong>Name Game</strong>: You know how sometimes special characters or reserved words can throw a wrench in the works? We started renaming things – jobs, environments – just in case some obscure naming convention was tripping us up.</li>
<li><strong>CLI Update Dance</strong>: “Maybe it’s an outdated Databricks CLI version?” I mused. So, we updated the CLI on the GitHub Actions runner. Always a good sanity check, though it didn’t solve this particular mystery. You can always find the latest CLI info <a href="https://docs.databricks.com/en/dev-tools/cli/index.html">here</a>.</li>
<li><strong>Inlining for Simplicity</strong>: Our bundle was structured with resources defined in separate files, referenced in the main <code>databricks.yml</code>. To rule out any issues with how the bundle was stitching these files together during the <code>databricks bundle deploy</code> (which internally runs <code>terraform apply</code>), we even tried moving <em>everything</em> directly into the <code>databricks.yml</code>. Desperate times, right?</li>
</ol>
<p>Let me tell you, after all that, the error message remained stubbornly the same. We were barking up the completely wrong tree, led astray by what seemed like a very specific error message from the Databricks CLI. It felt like the CLI was gaslighting me!</p>
</section>
<section id="the-aha-moment-or-more-like-are-you-kidding-me" class="level3">
<h3 class="anchored" data-anchor-id="the-aha-moment-or-more-like-are-you-kidding-me">The “Aha!” Moment (Or More Like “Are You Kidding Me?!”)</h3>
<p>So, what was the actual culprit after this day-long debugging marathon? Drumroll, please…</p>
<p><strong>We needed to explicitly <code>pip install dbt-databricks</code>, <code>dbt-core</code>, and (for our setup) <code>dbt-coverage</code> in the GitHub Actions workflow <em>before</em> running the bundle deployment.</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example snippet for your GitHub Actions workflow file</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .github/workflows/your-workflow.yml</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">jobs</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deploy</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runs-on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ubuntu-latest</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steps</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/checkout@v4</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Or your preferred version</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Set up Python</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uses</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> actions/setup-python@v5</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Or your preferred version</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">python-version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3.9'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Or your dbt compatible version</span></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Install DBT dependencies</span></span>
<span id="cb2-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-17">          pip install dbt-databricks dbt-core dbt-coverage </span>
<span id="cb2-18">          # Add any other dbt adapters or python dependencies your project needs</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Deploy Databricks Bundle</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # Make sure to set your Databricks host and token</span></span>
<span id="cb2-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DATABRICKS_HOST</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.DATABRICKS_HOST }}</span></span>
<span id="cb2-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">DATABRICKS_TOKEN</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ${{ secrets.DATABRICKS_TOKEN }}</span></span>
<span id="cb2-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">        run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb2-25">          databricks bundle deploy -t your_target_workspace # Replace with your target</span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span></code></pre></div>
<p>Yes. That. Was. It.</p>
<p>The GitHub Actions runner, being a fresh environment each time, didn’t have the necessary DBT Python packages installed. The Databricks CLI, when it tried to parse or validate the DBT tasks within the bundle, presumably couldn’t find the <code>dbt</code> command or the necessary adapter. But instead of saying something helpful like, “Hey, I can’t find <code>dbt</code> or <code>dbt-databricks</code>, is it installed and in your PATH?”, it threw that misleading error about missing environments and <code>environment_key</code> for the serverless job.</p>
<p>It seems the underlying tooling assumed DBT was present and, when it wasn’t, the error cascaded into something that looked like a configuration problem within the bundle definition itself.</p>
</section>
<section id="the-moral-of-the-story" class="level2">
<h2 class="anchored" data-anchor-id="the-moral-of-the-story">The Moral of the Story</h2>
<p>Honestly, the only reason we burned an entire day on what should have been a straightforward YAML debugging session was because the error message sent us on a wild goose chase. The CLI was essentially saying, “I can’t create this job because your environment and environment keys are missing,” when the real issue was, “I don’t even know what a dbt is because the Python packages aren’t here!”</p>
<p>This whole ordeal really underscores a point: when you’re working with tools that are rapidly evolving or are wrappers around other tools (like the Databricks CLI orchestrating Terraform and interacting with DBT), sometimes the error messages aren’t as mature or direct as they could be. A production-ready tool, ideally, should give you error stack traces that point you closer to the actual root cause.</p>
<p>So, if you find yourself in a similar boat, scratching your head over a Databricks bundle deployment failing in CI/CD with weird Terraform-esque errors related to job definitions, especially when DBT is involved: double-check that your DBT dependencies are explicitly installed in your pipeline environment!</p>
<p>Hopefully, sharing this saves someone else the headache.</p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>databricks</category>
  <category>dbt</category>
  <category>github-actions</category>
  <category>cicd</category>
  <category>terraform</category>
  <category>troubleshooting</category>
  <guid>https://piyush.dev/posts/2025-05-07-Databricks-CLI-Github-Actions.html</guid>
  <pubDate>Wed, 07 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://piyush.dev/posts/images/dbx_github_dbt.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>My RAG Misadventure: Guardrails, Open Routers, Ragas</title>
  <link>https://piyush.dev/posts/2025-05-03-My-RAG-Misadventure.html</link>
  <description><![CDATA[ 





<p>I’ve been hacking on a RAG project for a few days, You know the one here: <a href="https://github.com/jainds/rag-demos/tree/main/rag-guardrails-app">My RAG Guardrails App Repo</a></p>
<section id="building-on-giants-the-basic-rag-flow" class="level2">
<h2 class="anchored" data-anchor-id="building-on-giants-the-basic-rag-flow">Building on Giants (The Basic RAG Flow)</h2>
<p>I didn’t reinvent basic RAG mechanics. Chunking, embedding, vector storage – that’s handled by leveraging great external tools like specialized vector DBs (Weaviate, Pinecone, etc.) and libraries (Langchain/LlamaIndex). My project focuses on orchestrating these at basic levels to demonstrate the functionality and adding layers on top.</p>
</section>
<section id="nemo-guardrails-the-programmable-bouncer" class="level2">
<h2 class="anchored" data-anchor-id="nemo-guardrails-the-programmable-bouncer">Nemo Guardrails: The Programmable Bouncer</h2>
<p>So, NVIDIA’s Nemo Guardrails is pretty central here. How does it actually work? Think of it like programmable middleware sitting around the LLM calls.</p>
<p><strong>The Magic:</strong> You define conversational “flows” in this language called Colang. Nemo intercepts the inputs (user query, retrieved context) and outputs (LLM response) and runs them through these flows.</p>
<p><strong>Example Checks:</strong> A flow might say:</p>
<ul>
<li>“Before calling the LLM, check the user input for toxic language using this specific classification model.”</li>
<li>Or “After the LLM generates a response, ensure it doesn’t mention forbidden topics by scanning the text.”</li>
</ul>
<p>It can even maintain state to check conversational history or ensure the LLM response aligns factually with the provided context using another LLM call. It’s powerful stuff for enforcing rules beyond simple prompt instructions.</p>
<p>(And yeah, still didn’t focus much on super advanced context augmentation techniques – the main effort was elsewhere!)</p>
</section>
<section id="chatopenrouter-my-flexible-llm-gateway-battle-tested" class="level2">
<h2 class="anchored" data-anchor-id="chatopenrouter-my-flexible-llm-gateway-battle-tested">ChatOpenRouter: My Flexible LLM Gateway (Battle-Tested!)</h2>
<p>This custom class was born out of wanting flexibility. Why? To easily switch LLMs via services like OpenRouter.ai.</p>
<p><strong>Under the Hood:</strong> Crucially, this class is built on Langchain’s base language model class. This foundation means it plays nicely with all sorts of other Langchain-based tools and libraries down the line. While the exact implementation can vary, my ChatOpenRouter class uses a library called as litellm (which is awesome for calling 100+ LLM APIs with a unified interface) and makes direct HTTP requests to the OpenRouter API endpoint. It also very easily handles mapping different provider model names (e.g., “openai/gpt-4” vs “anthropic/claude-3-opus”), manages API keys securely, and even have some basic retry logic baked in for when API calls inevitably hiccup.</p>
<p><strong>The Stress Test:</strong> I did 3000+ API call binge over just 2-3 days. That wasn’t just random clicking! It involved rapidly iterating on prompts, testing different model responses via the router, debugging routing logic, and generally ensuring the abstraction didn’t add significant overhead or instability. It was crucial for validating that this flexible approach was actually practical.</p>
</section>
<section id="ragas-grading-my-rags-homework-with-some-red-marks" class="level2">
<h2 class="anchored" data-anchor-id="ragas-grading-my-rags-homework-with-some-red-marks">Ragas: Grading My RAG’s Homework (With Some Red Marks!)</h2>
<p>Knowing if the RAG output is good is key. Ragas helps quantify this.</p>
<p><strong>How it Works (e.g., Faithfulness):</strong> Take the ‘Faithfulness’ metric. It’s pretty clever – Ragas often uses another LLM call under the hood! It typically breaks down the generated answer sentence by sentence. Then, for each sentence, it asks an LLM: “Can you verify this statement based only on the following retrieved text chunks?” It counts how many statements check out. It’s a neat way to approximate fact-checking against the context.</p>
<p><strong>The Reality Check:</strong> Now, full disclosure time. Getting perfect scores across all Ragas metrics (Faithfulness, Answer Relevancy, Context Precision/Recall, etc.) is really tough, especially without ground-truth answers for everything. Right now, running the evaluations, I’ve definitely got some tests, particularly around metrics like Context Recall [or maybe another specific metric like Answer Correctness if applicable], that are still showing failures or scores lower than I’d like. It tells me there’s still tuning needed – maybe the retrieval isn’t pulling all the right info, or the prompt needs more tweaking to guide the LLM better. Work in progress!</p>
</section>
<section id="langfuse-my-debugging-crystal-ball" class="level2">
<h2 class="anchored" data-anchor-id="langfuse-my-debugging-crystal-ball">Langfuse: My Debugging Crystal Ball</h2>
<p>Debugging RAG pipelines can feel like guesswork sometimes. Langfuse changes that.</p>
<p><strong>The Integration:</strong> Getting it running was smoother than expected. You typically import the Langfuse SDK, maybe add a decorator (<code>@observe()</code>) to your key functions (like the main query handler, the retriever call, the LLM call via ChatOpenRouter), or use their context managers.</p>
<p><strong>What it Captures:</strong> It then asynchronously ships off tons of useful data for each run: the inputs/outputs of decorated functions, timings, metadata you add (like which model was used), the prompts, the retrieved chunks, LLM responses, even the calculated Ragas scores for that specific run if you integrate it! Looking at the trace in the Langfuse UI makes spotting the exact point of failure or bottleneck way easier than <code>print()</code> statements!</p>
</section>
<section id="testing-the-important-bits" class="level2">
<h2 class="anchored" data-anchor-id="testing-the-important-bits">Testing the Important Bits</h2>
<p>And yup, still got the standard tests: unit tests for small pieces, integration tests for the flow, and specific tests trying to fool my Nemo Guardrails.</p>
</section>
<section id="so-whats-the-real-point-here" class="level2">
<h2 class="anchored" data-anchor-id="so-whats-the-real-point-here">So, What’s the Real Point Here?</h2>
<p>Look, let’s be clear: this project is not ‘finished’ software ready for primetime deployment. Like I mentioned, some of those Ragas evals highlight areas needing improvement!</p>
<p>But the main goal all along was to create a working demonstration of how to integrate these specific, powerful tools together in a RAG context:</p>
<ul>
<li>Wiring up Nemo Guardrails for robust, programmable safety.</li>
<li>Building and battle-testing a flexible LLM gateway like ChatOpenRouter.</li>
<li>Implementing Ragas for serious, quantitative evaluation.</li>
<li>Adding deep observability with Langfuse.</li>
</ul>
<p>It’s really about showcasing that integration pattern. If you’re looking to build a RAG system that goes beyond the basics and incorporates these kinds of advanced features for safety, flexibility, evaluation, and observability, then hopefully, my messy, work-in-progress repo gives you a useful starting point or some concrete ideas.</p>
<p>Feel free to dive into the code and see how the wires connect! Let me know if you have questions.</p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>rag</category>
  <category>nemo-guard-rails</category>
  <category>ragas</category>
  <category>langfuse</category>
  <category>genai</category>
  <category>agentic-ai-testing</category>
  <guid>https://piyush.dev/posts/2025-05-03-My-RAG-Misadventure.html</guid>
  <pubDate>Sat, 03 May 2025 00:00:00 GMT</pubDate>
  <media:content url="https://piyush.dev/posts/images/20250506_1918_Robot Wiring Future_simple_compose_01jtjn1d2xf2pt4190v973yx0q.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>My Weekend Wrestling Match with Madrigal</title>
  <link>https://piyush.dev/posts/2025-04-28-My-Weekend-Wrestling-Match-with-Madrigal.html</link>
  <description><![CDATA[ 





<hr>
<section id="my-weekend-wrestling-match-with-madrigal-a-mlops-deployment-story" class="level2">
<h2 class="anchored" data-anchor-id="my-weekend-wrestling-match-with-madrigal-a-mlops-deployment-story">My Weekend Wrestling Match with Madrigal: A MLOps Deployment Story</h2>
<p>You know that feeling? You see a cool project online – in my case, <a href="https://github.com/aishwaryaprabhat/madrigal">Madrigal</a>, a Red Teaming MLOps platform – glance at the architecture diagram, find the code, and think, “Hey, I could totally run this locally!” My machine’s got the chops, so why not dive in over the weekend? Famous last words, right? What followed was a bit of a rollercoaster ride through the highs and lows of setting things up, hitting walls, and having those little “aha!” moments. Grab a cuppa, and let me tell you about it.</p>
<p><strong>Day 1: The Multipass Mystery</strong></p>
<p>Fired up and ready to go, I started with <a href="https://multipass.run/">Multipass</a>. It’s Canonical’s tool for spinning up Ubuntu VMs pretty easily, and I paired it with <a href="https://microk8s.io/">MicroK8s</a> for a lightweight Kubernetes setup. The plan? Get a local dev environment rocking for some ML workflow deployment.</p>
<p>I spent a good chunk of time wrestling with <a href="https://helm.sh/">Helm charts</a> and getting the Kubernetes cluster humming. But then, roadblock #1: I set up port-forwarding, but my services were playing hide-and-seek – completely inaccessible from outside the VM. After digging around, it seemed like Multipass’s networking, while great for simple stuff, gets a bit tricky when you need the more advanced routing Kubernetes often demands. Maybe I just didn’t grok the docs well enough, but it felt like hitting a wall for this kind of workload. I eventually figured out that forwarding port to 0.0.0.0:port would work instead of localhost, but it’s too complex for my taste.</p>
<ul>
<li><strong>The realization:</strong> Picking the right virtualization tool is key. For complex K8s setups, you really need something with beefy, flexible networking options.</li>
</ul>
<p><strong>Day 2: ARM Wrestling with Kubeflow</strong></p>
<p>Okay, time for Plan B. I pivoted to <a href="https://k3d.io/">k3d</a>, which wraps <a href="https://k3s.io/">k3s</a> (a lightweight K8s) in Docker containers. Seemed slick and promising! That is, until I tried deploying <a href="https://www.kubeflow.org/docs/components/pipelines/overview/">Kubeflow Pipelines (KFP)</a>. Pods started crashing left and right (<code>CrashLoopBackOff</code>, my old nemesis). A bit of detective work (<code>kubectl logs...</code>) revealed the culprit: the container images for kfp weren’t built for my Mac’s ARM64 architecture.</p>
<p>Seriously? With Apple Silicon Macs being so common now, I was surprised this was still a snag. Turns out, it’s a known thing, and getting official Kubeflow images to play nice on ARM isn’t always straightforward. Some folks have even created their own modified manifests using alternative ARM64-compatible images just to get things working <a href="https://github.com/kubeflow/manifests/issues/2745">github.com</a>. It seems deploying KFP locally on a Mac might still be a bit niche. Others trying this on Apple Silicon have found tools like <a href="https://rancherdesktop.io/">Rancher Desktop</a> helpful for managing Kubernetes locally <a href="https://fmind.medium.com/how-to-install-kubeflow-on-apple-silicon-3565db8773f3">fmind.medium.com</a>, which might be worth exploring next time.</p>
<ul>
<li><strong>The facepalm moment:</strong> <em>Always</em> check if your container images support your chip architecture (like ARM64)! It saves a <em>lot</em> of debugging headaches.</li>
</ul>
<p><strong>Day 3: Phoning a Friend (aka the Creator)</strong></p>
<p>Hitting more snags than I anticipated, I decided to do something radical: I reached out to Aishwarya, Madrigal’s creator. Turns out, he’d deployed it smoothly on a good ol’ Linux VM in <a href="https://www.digitalocean.com/">DigitalOcean</a>. Sometimes(or oftentimes) the simplest path is the best! So, I decided to follow suit and spin up a cloud VM. Lo and behold, things went <em>much</em> smoother. Kubeflow Pipelines and the <a href="https://docs.ray.io/en/latest/cluster/kubernetes/getting-started.html">Ray cluster</a> popped up, ready for action.</p>
<ul>
<li><strong>The reminder:</strong> Don’t be afraid to ask! Creators are usually happy to help, and sometimes a quick chat can save hours of frustration. They’re human too!</li>
</ul>
<p><strong>Day 4: Helm Chart Headaches on the Cloud</strong></p>
<p>Feeling confident with the cloud setup, I thought, “Let’s level up! How about a <em>managed</em> Kubernetes cluster on DigitalOcean?” Got the cluster running, tried deploying KFP again using Helm charts. Pods were green this time! Success? Not quite. The pipelines wouldn’t actually <em>run</em>.</p>
<p>This time, the gremlins were hiding in the Helm chart configurations. Service accounts were missing, security policies weren’t quite right for my setup (especially around the cache-deployer component and <a href="https://min.io/">MinIO’s</a> security settings). I also realized the charts I pulled were likely bleeding-edge (<code>main</code>/<code>head</code>), so I dialed back to a stable version tag like those mentioned in the official docs <a href="https://www.kubeflow.org/docs/started/installing-kubeflow/#standalone-kubeflow-components">kubeflow.org</a> and applied the necessary tweaks.</p>
<ul>
<li><strong>The Helm Chart Hindsight:</strong> Helm is awesome, but don’t treat charts as magic black boxes. Peek inside, understand the defaults (especially security settings!), and be prepared to customize them for your specific cluster environment.</li>
</ul>
<p><strong>Day 5: MLflow’s Postgres Password Puzzle</strong></p>
<p>Next up: integrating <a href="https://mlflow.org/">MLflow</a> for tracking experiments. Deployed it, and… authentication errors connecting to its <a href="https://www.postgresql.org/">PostgreSQL</a> database. Grrr. I triple-checked the passwords I’d set in the Helm values, they <em>looked</em> right.</p>
<p>The issue? A classic config mismatch. The credentials defined in the Helm chart values weren’t perfectly matching what ended up in the Kubernetes secrets that the MLflow pods were actually <em>using</em>. Deployment, after re-deployments and some more re-deployment in ArgoCD tends to generate this issue. Pro-tip I learned: sometimes <a href="https://argoproj.github.io/cd/">ArgoCD’s</a> “Hard Refresh” can help shake loose weird caching issues when debugging Secret updates.</p>
<ul>
<li><strong>The Configuration Consistency Check:</strong> Keep your config files and your Kubernetes secrets perfectly in sync. It sounds obvious, but it’s a common tripwire! Hit that hard Refresh button!!</li>
</ul>
<p><strong>Bonus Round: When Libraries Don’t Play Nice</strong></p>
<p>Just when I thought I was cruising, a Python error popped up while using <a href="https://huggingface.co/docs/transformers/index">Hugging Face’s Transformers</a> library: a weird <code>ValueError</code> mentioning <code>sph_legendre_p</code> from <a href="https://scipy.org/">SciPy</a>. This usually screams “version conflict!” Sure enough, the versions of SciPy and <a href="https://numpy.org/">NumPy</a> installed in my environment weren’t compatible cousins.</p>
<ul>
<li><strong>The Dependency Dance:</strong> Python environments, especially in ML, are delicate ecosystems. Keep dependencies compatible and managed carefully (using tools like <code>pip freeze &gt; requirements.txt</code> or <a href="https://python-poetry.org/">Poetry</a>/<a href="https://docs.conda.io/en/latest/">Conda</a> environments).</li>
</ul>
<p><strong>The Final Boss: Not Enough Juice!</strong></p>
<p>After squashing all those bugs, I finally had everything deployed. I submitted pipeline jobs, Ray cluster tasks… and nothing happened. The jobs were accepted, but they just sat there, refusing to actually execute. The logs weren’t screaming errors anymore. What gives?</p>
<p>Turns out, the final hurdle was the most basic: my Kubernetes cluster (the managed one) was just too small! It didn’t have enough CPU or memory resources to actually run the demanding Kubeflow and Ray workloads I was throwing at it.</p>
<ul>
<li><strong>The Resource Reality:</strong> Size matters! Make sure your Kubernetes cluster has enough CPU, memory, and potentially GPU resources for the workloads you plan to run. I had to scale my cluster to allow it to scale upto 9 nodes, though it only scaled till 6. Under-provisioning leads to silent failures or jobs stuck in pending limbo. Some deployment issues on platforms like k3d can sometimes be resource-related, even if it’s not immediately obvious like running out of memory.</li>
</ul>
<p><strong>Wrapping Up the Weekend</strong></p>
<p>Phew! What a weekend. It was a whirlwind of debugging, learning, and tweaking. From local setup snags to cloud configuration complexities, every problem solved felt like a mini-victory and taught me something valuable about building out an MLOps platform.</p>
<p><strong>My main takeaways?</strong></p>
<ol type="1">
<li><strong>Check Tool Fit:</strong> Make sure your tools (VMs, K8s distros, container images) actually work with your hardware (hello, ARM64!) and networking needs.</li>
<li><strong>Know Your Network:</strong> Simple VMs might not cut it for complex K8s networking.</li>
<li><strong>Helm Isn’t Magic:</strong> Understand and tweak Helm charts, especially security bits.</li>
<li><strong>Config Consistency:</strong> Keep Helm values and K8s secrets aligned.</li>
<li><strong>Resource Right-Sizing:</strong> Give your K8s cluster enough power to run your stuff!</li>
</ol>
<p>Huge thanks to the communities and developers behind <a href="https://multipass.run/">Multipass</a>, <a href="https://microk8s.io/">MicroK8s</a>, <a href="https://k3d.io/">k3d</a>, <a href="https://www.kubeflow.org/">Kubeflow</a>, <a href="https://www.ray.io/">Ray</a>, <a href="https://argoproj.github.io/cd/">ArgoCD</a>, <a href="https://min.io/">MinIO</a>, <a href="https://www.postgresql.org/">PostgreSQL</a>, <a href="https://mlflow.org/">MLflow</a>, and <a href="https://huggingface.co/docs/transformers/index">Transformers</a>. Couldn’t have even attempted this without their work!</p>
<p>If you’ve wrestled with similar MLOps deployment dragons or have tips to share, drop a comment! Always keen to learn from others navigating this fast-moving space. Let’s keep building cool things!</p>


</section>

 ]]></description>
  <category>mlops</category>
  <category>red-teaming</category>
  <category>genai</category>
  <category>agentic-ai-testing</category>
  <guid>https://piyush.dev/posts/2025-04-28-My-Weekend-Wrestling-Match-with-Madrigal.html</guid>
  <pubDate>Thu, 24 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://piyush.dev/posts/images/Madrigal_flight.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>The Inertia Model and Its Relevance to AI Models</title>
  <dc:creator>Piyushkumar Jain</dc:creator>
  <link>https://piyush.dev/posts/inertia/inertia.html</link>
  <description><![CDATA[ 





<p>The Inertia Model, as described in The Great Mental Models series, explains how objects—or systems—tend to resist change due to existing momentum or stagnation. In physics, inertia keeps a moving object in motion unless acted upon by an external force. The same principle applies to decision-making, businesses, and even artificial intelligence models.</p>
<p>AI models, once trained, exhibit a form of inertia. They rely on the data they were trained on and the assumptions built into their architectures. Without intentional updates or external intervention, they continue making predictions based on historical patterns, even when those patterns become outdated. For example, a recommendation algorithm trained on past user behavior may struggle to adapt to sudden shifts in preferences unless it is retrained with fresh data. Another example of inertia, traditional businesses like banking and insurance continue to struggle in adopting latest AI technologies in their core areas.</p>
<p>Another aspect of inertia in AI is model bias. If an AI system has learned biased associations from historical data, that bias will persist unless corrective measures—such as better data curation or active bias mitigation—are introduced. The resistance to change mirrors human cognitive inertia, where existing beliefs and habits are difficult to alter without strong external stimuli.</p>
<p>Applications and Decision making, especially in relation to AI, chimes well with this model. AI models/applications that are incrementally increasing/improving certain parts of a business process are leveraging existing momentum. Comparatively easier to explain the significance, value and cost to the business. It aligns well with the direction and movement of the organization and finds easier/wider acceptance in the organisation. Consider an AI model/application that is fundamentally disrupting the existing process or probably making it altogether redundant; they require significantly more escape velocity (so to speak, in cost, explanation, value) to achieve the desired results and hardly see the light of the day.</p>
<p>In a broader sense, recognizing inertia in AI systems helps researchers and practitioners understand the importance of continuous learning and adaptation. Just as overcoming inertia in human behavior requires conscious effort, ensuring AI models remain effective and relevant requires ongoing intervention, retraining, and validation.</p>
<p>By applying the Inertia Model, we can better anticipate challenges in AI development and deployment, ensuring that models do not stagnate or reinforce outdated patterns, but instead evolve with the real-world data they interact with.</p>



 ]]></description>
  <category>books</category>
  <guid>https://piyush.dev/posts/inertia/inertia.html</guid>
  <pubDate>Thu, 03 Apr 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Random Convolutional Kernel Transform</title>
  <link>https://piyush.dev/posts/2020-07-24-Random-convolutional-kernel-transform.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><strong><em>ROCKET: Exceptionally fast and accurate time series classification using random convolutional kernels</em></strong> is a research paper published in October 2019 by Angus Dempster, François Petitjean, Geoffrey I. Webb. The paper presents a unique methodology to transform time series data using convolutional kernels to improve classification accuracy. This paper is unique in learning from the recent success of convolutional neural networks and transferring it on time-series datasets.</p>
<p>The link to download the paper from arxiv - <a href="https://arxiv.org/pdf/1910.13051">Paper</a></p>
</section>
<section id="time-series-data" class="level2">
<h2 class="anchored" data-anchor-id="time-series-data">Time Series data</h2>
<p>Time series data is defined as a set of data points containing details about different points in time. Generally, time-series data contains data points sampled/observed at an equal interval of time. Time series classification is task of identifying patterns and signals in the data in relation to respective classes.</p>
<p>The proposal is features generated by the convolution of randomly generated kernels on time series data results in faster and better time series classifiers. We will go into more detail of this proposal and understand how the methodology proposed by them helps to improve the accuracy.</p>
</section>
<section id="kernels" class="level2">
<h2 class="anchored" data-anchor-id="kernels">Kernels</h2>
<p>Kernels in simple terms is a small matrix used to modify the images. Let’s try to understand kernels using an example:</p>
<p>here is a 3 x 3 kernel used to sharpen images:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5C%5Cbegin%7Bbmatrix%7D%200%20&amp;%20-1%20&amp;%200%20%5C%5C%5C%5C%20-1%20&amp;%205%20&amp;%20-1%20%5C%5C%5C%5C%200%20&amp;%20-1%20&amp;%200%20%20%5C%5Cend%7Bbmatrix%7D%0A"></p>
<p>To sharpen an image using the above kernel, we need to perform a dot product of each pixel in the image with the kernel matrix. The resulting image would then be a sharpened version of the original image. Observe the gif below to see a live version of the kernel dot product in motion.</p>
<p>Following is an example from setosa.io site to demonstrate how kernels can be used to make desirable changes to an image.</p>
<p><img src="https://piyush.dev/posts/images/setosa-kernel-image.png" title="credit: setosa.io/ev/image-kernels/" class="img-fluid"></p>
<section id="parameters-of-kernels" class="level3">
<h3 class="anchored" data-anchor-id="parameters-of-kernels">5 parameters of kernels</h3>
<p>A kernel has 5 different parameter using which it can be configured.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 35%">
<col style="width: 35%">
<col style="width: 29%">
</colgroup>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Description</th>
<th>Value logic</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Bias</td>
<td>Bias is added to the result of the convolution operation between input time series and weights of the given kernel</td>
<td>Bias is sampled from a uniform distribution, b ∼ U(−1,1)</td>
</tr>
<tr class="even">
<td>Size(Length)</td>
<td>Size defines the number of rows and columns a kernel has. The above example has a size of 3 rows and 3 columns</td>
<td>Length is selected randomly from {7,9,11} with equal probability, making kernels considerably shorter than input time series in most cases</td>
</tr>
<tr class="odd">
<td>Weights</td>
<td>The values that make up the kernel matrix are weights</td>
<td>The weights are sampled from a normal distribution, ∀w ∈ W, w ∼ N(0,1), and are mean-centered after being set, ω = W − W. As such, most weights are relatively small, but can take on larger magnitudes</td>
</tr>
<tr class="even">
<td>Dilation</td>
<td>Dilation spreads a kernel over the input such that with dilation of value two, weights in a kernel are convolved with every second element of input time series</td>
<td>Dilation is sampled on an exponential scale d = ⌊2x⌋,x ∼ U(0,A), input −1 where A = log2 kernel −1</td>
</tr>
<tr class="odd">
<td>Padding</td>
<td>Padding involves appending values(typically zero) to the start and end of input time series such that the middleweight of a kernel aligns with the first value of input time series at the start of convolution</td>
<td>When each kernel is generated, a decision is made (at random, with equal probability) whether or not padding will be used when applying the kernel</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="features-generated-by-rocket-kernel" class="level2">
<h2 class="anchored" data-anchor-id="features-generated-by-rocket-kernel">Features generated by Rocket kernel</h2>
<p>Rocket computes two aggregate features from each kernel and feature convolution. The two features are created using the well-known methodology global/average max pooling and a unique methodology positive proportion value (ppv).</p>
<section id="max-pooling" class="level3">
<h3 class="anchored" data-anchor-id="max-pooling">Max-pooling</h3>
<p>Global max-pooling is essentially picking the maximum value from the result of convolution and max pooling is picking the maximum value within a pool size. Assuming that the output of convolution is 0,1,2,2,5,1,2, global max pooling outputs 5, whereas ordinary max pooling with pool size equals to 3 outputs 2,2,5,5,5</p>
</section>
<section id="proportion-of-positive-values" class="level3">
<h3 class="anchored" data-anchor-id="proportion-of-positive-values">Proportion of positive values</h3>
<p>Let’s try to understand using the author’s own words to describe ppv.</p>
<blockquote class="blockquote">
<p>ppv directly captures the proportion of the input which matches a given pattern, i.e., for which the output of the convolution operation is positive. The ppv works in conjunction with the bias term. The bias term acts as a kind of ‘threshold’ for ppv. A positive bias value means that ppv captures the proportion of the input reflecting even ‘weak’ matches between the input and a given pattern, while a negative bias value means that ppv only captures the proportion of the input reflecting ‘strong’ matches between the input and the given pattern.</p>
</blockquote>
</section>
</section>
<section id="rocket-usage" class="level2">
<h2 class="anchored" data-anchor-id="rocket-usage">Rocket usage</h2>
<p>Now that we understand what kernels are and how rocket generates two outputs by convolution of kernel and input vector, let’s understand how to use it.</p>
<p>The time-series data needs to be provided as input into the rocket transform method, the value for the number of kernels (i.e.&nbsp;k) is set at 10,000 by default. This means that for each one of the input features we get 20,000 features as output from rocket transform.</p>
<p>The transformed feature table can now we used as input data for any classification algorithm, authors advise linear algorithms like ridge regression classifier or logistic regression.</p>
</section>
<section id="rocket-vs-others" class="level2">
<h2 class="anchored" data-anchor-id="rocket-vs-others">Rocket v/s others</h2>
<p>Rocket’s approach of creating a large number of random kernels and generating two features from each kernel is unique. Rocket distinguishes itself based on various other factors which we will discuss below.</p>
<section id="rocket-vs-neural-nets" class="level3">
<h3 class="anchored" data-anchor-id="rocket-vs-neural-nets">Rocket v/s neural nets</h3>
<ol type="1">
<li>Rocket doesn’t use a hidden layer or any non-linearities</li>
<li>Features produced by Rocket are independent of each other</li>
<li>Rocket works with any kind of classifier</li>
</ol>
</section>
<section id="rocket-vs-cnn" class="level3">
<h3 class="anchored" data-anchor-id="rocket-vs-cnn">Rocket v/s CNN</h3>
<ol type="1">
<li>Rocket uses a very large number of kernels</li>
<li>In CNN, a group of kernels tend to share the same size, dilation and padding. Rocket has all 5 parameters randomized.</li>
<li>In CNN, Dilation increases exponentially with depth; Rocket has random dilation values</li>
<li>CNNs only have average/max pooling. Rocket has a unique pooling called as ppv which has proven to provide much better classification accuracy on time series.</li>
</ol>
</section>
</section>
<section id="rocket-performance" class="level2">
<h2 class="anchored" data-anchor-id="rocket-performance">Rocket performance</h2>
<p>The authors provide detailed information about the classification accuracy and time taken to train the model. I am discussing the results from bakeoff datasets in this article and you will be able to find results from various additional datasets in the paper.</p>
<section id="accuracy" class="level3">
<h3 class="anchored" data-anchor-id="accuracy">Accuracy</h3>
<p>Rank is calculated by taking a mean value of classification accuracy across all the 85 datasets in bakeoff datasets.</p>
<p>It is clear that the model trained using features derived using rocket is faring better compared to other models on average among all the datasets in bake-off datasets. Please note that the dark horizontal line connecting the rank position of two models depict that the results from two models are not statistically insignificant.</p>
<p><img src="https://piyush.dev/posts/images/Rocket-mean-acuracy-on-bakeoff-datasets.png" class="img-fluid"></p>
</section>
<section id="time-taken-to-train" class="level3">
<h3 class="anchored" data-anchor-id="time-taken-to-train">Time taken to train</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 37%">
<col style="width: 29%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>Architecture</th>
<th>Largest dataset(ElectricDevices, with 8,926 training examples)</th>
<th>Longest time series(HandOutlines, with time series of length 2,709)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ROCKET</td>
<td>6 minutes 33 seconds</td>
<td>4 minutes 18 seconds</td>
</tr>
<tr class="even">
<td>MrSEQL</td>
<td>31 minutes</td>
<td>1 hour 55 minutes</td>
</tr>
<tr class="odd">
<td>cBOSS</td>
<td>3 hours 6 minutes</td>
<td>42 minutes</td>
</tr>
<tr class="even">
<td>Proximity Forest</td>
<td>1 hour 35 minutes</td>
<td>3 days</td>
</tr>
<tr class="odd">
<td>TS-CHIEF</td>
<td>2 hours 24 minutes</td>
<td>4 days</td>
</tr>
<tr class="even">
<td>Inception Time (on GPU)</td>
<td>7 hours 46 minutes</td>
<td>8 hours 10 minutes</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="example" class="level2">
<h2 class="anchored" data-anchor-id="example">Example</h2>
<p>In the below examples, we are going to try and train a Human activity recognizer time series classifier. I am using two nice repo by Guillaume Chevalier showcasing <a href="https://github.com/jainds/LSTM-Human-Activity-Recognition">LSTM model on Human activity recognizer</a> with a classification accuracy of 91% and by <a href="https://github.com/thanatchon36/Rocket_vs_LSTM-Human-Activity-Recognition">Thanatchon</a> . Let’s see how much accuracy can be achieved by using rocket transforms.</p>
<p>We will be using sktime implementation of rocket in this example</p>
<section id="install-libraries-import-statements" class="level3">
<h3 class="anchored" data-anchor-id="install-libraries-import-statements">Install libraries &amp; import Statements</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> pip install pandas numba scikit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>learn sktime matplotlib</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.core.interactiveshell <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InteractiveShell</span>
<span id="cb2-5">InteractiveShell.ast_node_interactivity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all"</span></span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zipfile</span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#orchestration</span></span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_pipeline</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#transforms</span></span>
<span id="cb2-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sktime.transformers.series_as_features.rocket <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Rocket </span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plot</span></span>
<span id="cb2-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#metrics</span></span>
<span id="cb2-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb2-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix</span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_confusion_matrix</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Classifier</span></span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RidgeClassifierCV</span></code></pre></div>
</section>
<section id="download-dataset-and-extract" class="level3">
<h3 class="anchored" data-anchor-id="download-dataset-and-extract">Download dataset and extract</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the file</span></span>
<span id="cb3-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI HAR Dataset.zip"</span></span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">zip_ref <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zipfile.ZipFile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UCI HAR Dataset.zip'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb4-5">zip_ref.extractall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>)</span>
<span id="cb4-6">zip_ref.close()</span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># validate if file exists</span></span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>ls .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UCI HAR Dataset'</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Useful Constants</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Those are separate normalised input features for the neural network</span></span>
<span id="cb6-5">INPUT_SIGNAL_TYPES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_acc_x_"</span>,</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_acc_y_"</span>,</span>
<span id="cb6-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_acc_z_"</span>,</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_gyro_x_"</span>,</span>
<span id="cb6-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_gyro_y_"</span>,</span>
<span id="cb6-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"body_gyro_z_"</span>,</span>
<span id="cb6-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_acc_x_"</span>,</span>
<span id="cb6-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_acc_y_"</span>,</span>
<span id="cb6-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_acc_z_"</span></span>
<span id="cb6-15">]</span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output classes to learn how to classify</span></span>
<span id="cb6-18">LABELS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb6-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WALKING"</span>, </span>
<span id="cb6-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WALKING_UPSTAIRS"</span>, </span>
<span id="cb6-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WALKING_DOWNSTAIRS"</span>, </span>
<span id="cb6-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SITTING"</span>, </span>
<span id="cb6-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STANDING"</span>, </span>
<span id="cb6-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LAYING"</span></span>
<span id="cb6-25">]</span></code></pre></div>
</section>
<section id="defining-train-test-data" class="level3">
<h3 class="anchored" data-anchor-id="defining-train-test-data">Defining Train test data</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-show</span></span>
<span id="cb7-2">DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span></span>
<span id="cb7-3">TRAIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train/"</span></span>
<span id="cb7-4">TEST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test/"</span></span>
<span id="cb7-5">DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATA_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UCI HAR Dataset/"</span></span>
<span id="cb7-6"></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load "X" (the neural network's training and testing inputs)</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_X(X_signals_paths):</span>
<span id="cb7-11">    X_signals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-12">    </span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal_type_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> X_signals_paths:</span>
<span id="cb7-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(signal_type_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb7-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read dataset from disk, dealing with text files' syntax</span></span>
<span id="cb7-16">        X_signals.append(</span>
<span id="cb7-17">            [np.array(serie, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> serie <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [</span>
<span id="cb7-18">                row.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'  '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span></span>
<span id="cb7-19">            ]]</span>
<span id="cb7-20">        )</span>
<span id="cb7-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.close()</span>
<span id="cb7-22">    </span>
<span id="cb7-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.transpose(np.array(X_signals), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb7-24"></span>
<span id="cb7-25">X_train_signals_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-26">    DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TRAIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inertial Signals/"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train.txt"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> INPUT_SIGNAL_TYPES</span>
<span id="cb7-28">]</span>
<span id="cb7-29">X_test_signals_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-30">    DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TEST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inertial Signals/"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> signal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb7-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test.txt"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> signal <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> INPUT_SIGNAL_TYPES</span>
<span id="cb7-32">]</span>
<span id="cb7-33"></span>
<span id="cb7-34">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_X(X_train_signals_paths)</span>
<span id="cb7-35">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_X(X_test_signals_paths)</span>
<span id="cb7-36"></span>
<span id="cb7-37"></span>
<span id="cb7-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load "y" (the neural network's training and testing outputs)</span></span>
<span id="cb7-39"></span>
<span id="cb7-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_y(y_path):</span>
<span id="cb7-41">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(y_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb7-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read dataset from disk, dealing with text file's syntax</span></span>
<span id="cb7-43">    y_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(</span>
<span id="cb7-44">        [elem <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> elem <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [</span>
<span id="cb7-45">            row.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'  '</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>).strip().split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span></span>
<span id="cb7-46">        ]], </span>
<span id="cb7-47">        dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.int32</span>
<span id="cb7-48">    )</span>
<span id="cb7-49">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.close()</span>
<span id="cb7-50">    </span>
<span id="cb7-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Substract 1 to each output class for friendly 0-based indexing </span></span>
<span id="cb7-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-53"></span>
<span id="cb7-54">y_train_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TRAIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_train.txt"</span></span>
<span id="cb7-55">y_test_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DATASET_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> TEST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_test.txt"</span></span>
<span id="cb7-56"></span>
<span id="cb7-57">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_y(y_train_path)</span>
<span id="cb7-58">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_y(y_test_path)</span>
<span id="cb7-59"></span>
<span id="cb7-60"></span>
<span id="cb7-61"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OK !'</span>)</span></code></pre></div>
</section>
<section id="preparing-dataset" class="level3">
<h3 class="anchored" data-anchor-id="preparing-dataset">Preparing dataset</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-show</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_data(data_array):</span>
<span id="cb8-3"></span>
<span id="cb8-4">    dim_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>):</span>
<span id="cb8-7">        name_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'dim_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb8-8">        dim_dict[name_i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-9"></span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data_array.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb8-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(data_array.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]):</span>
<span id="cb8-12">            name_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'dim_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(j)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb8-13">            dim_dict[name_dim].append(</span>
<span id="cb8-14">                pd.Series(data_array[i][j]).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>))</span>
<span id="cb8-15">            </span>
<span id="cb8-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame(dim_dict)</span>
<span id="cb8-17"></span>
<span id="cb8-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OK !'</span>)</span></code></pre></div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-show</span></span>
<span id="cb9-2">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb9-3">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_data(X_train)</span>
<span id="cb9-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_data(X_test)</span>
<span id="cb9-7"></span>
<span id="cb9-8">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(y_train.copy().ravel())</span>
<span id="cb9-9">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(y_test.copy().ravel())</span>
<span id="cb9-10"></span>
<span id="cb9-11">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(each) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_train]</span>
<span id="cb9-12">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(each) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y_test]</span></code></pre></div>
</section>
<section id="rocket-model" class="level3">
<h3 class="anchored" data-anchor-id="rocket-model">Rocket Model</h3>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">rocket_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_pipeline(</span>
<span id="cb10-2">    Rocket(num_kernels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb10-3">    RidgeClassifierCV(alphas<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.logspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-4">)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time rocket_pipeline.fit(X_train, y_train)</span></code></pre></div>
</section>
<section id="accuracy-1" class="level3">
<h3 class="anchored" data-anchor-id="accuracy-1">Accuracy</h3>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time rocket_pipeline.score(X_test, y_test)</span></code></pre></div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(rocket_pipeline.predict(X_test))</span></code></pre></div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>time plot_confusion_matrix(rocket_pipeline, X_test, y_test, display_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LABELS)</span></code></pre></div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We were able to improve upon accuracy achieved by LSTM model by a very simple implementation using Rocket. LSTM had scored 91% and using Rocket + Ridge Regression classifier the accuracy jumped to 93%. The performance gain achieved becomes sweeter when you compare the time required to code and train, which was very small compared for rocket in comparison to LSTM in our case. The Rocket methodology is an innovative, simple and fresh technique that attracted my attention to this research paper.</p>


</section>

 ]]></description>
  <category>research-paper</category>
  <category>time-series</category>
  <category>classification</category>
  <guid>https://piyush.dev/posts/2020-07-24-Random-convolutional-kernel-transform.html</guid>
  <pubDate>Fri, 24 Jul 2020 00:00:00 GMT</pubDate>
  <media:content url="https://piyush.dev/posts/images/Rocket-mean-acuracy-on-bakeoff-datasets.png" medium="image" type="image/png" height="40" width="144"/>
</item>
<item>
  <title>Intro to CVAT</title>
  <dc:creator>Piyushkumar Jain</dc:creator>
  <link>https://piyush.dev/posts/2020-07-11-CVAT-All-you-need-to-know.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Once you start your journey into data science, you quickly learn that as part of your job you are spending more time with data than models. Data and labels go hand in hand and hence, I will be sharing what you need to know before you decide to use <a href="https://cvat.org">CVAT</a> as your image/video annotation tool. Let’s start with the easier bit i.e.&nbsp;complete name of tool - Computer Vision Annotation Tool</p>
</section>
<section id="ease-of-setup" class="level2">
<h2 class="anchored" data-anchor-id="ease-of-setup">Ease of Setup</h2>
<p>A treat awaits in this section if you have worked with <a href="https://docs.docker.com/compose/">docker compose</a> before, CVAT is very easy to setup as the source code contains necessary docker compose files which makes complete setup a breeze in your local. Repo also features an instruction documentation which is comprehensively written and covers every line of code that needs to be executed in order to get the tool running.</p>
<p>Complete setup is nicely segregated into docker-compose files with docker apps named cvat,cvat_ui, cvat_db. There are two ways to go ahead with setting up the tool, the easier way of deploying it in a VM and a little longer way on Kubernetes. A VM with enough firepower to run an instance of Postgres, Django backend and a react app to support the number of users that you expect to access the tool simultaneously should be alright. An example: I was able to support 200+ users(some of them were automated scripts) in a single VM with the analytics component running using a Standard D5 v2 (16 vcpus, 56 GiB memory) Azure VM. The power of your VM needs to be proportionately increased if you wish to use the additional components like deep learning model based auto labelling. If you choose to deploy the tool in Kubernetes, you could benefit from the auto-scaling functionality for each app inside CVAT. Kubernetes YAML files are not available as part of source code and hence you might need to create them yourself. I recommend <a href="https://kompose.io">Kompose</a> to create Kubrnetes YAML from docker compose files. Scalability is an important aspect while considering a tool for production deployment. In order to make sure that the tool works for foreseeable growth in number of users. App can be scaled easily since everything is nicely wrapped into docker containers.</p>
</section>
<section id="ease-of-usage" class="level2">
<h2 class="anchored" data-anchor-id="ease-of-usage">Ease of Usage</h2>
<p>The application’s desktop UI although not fancy, is very feature rich and achieves the goal of labeling images and videos with ease.There’s a long list of keyboard shortcuts supported and you don’t necessarily need to remember every shortcut, simply pick and choose which help you speed up. I found the shortcut to create poly shapes and rectangles during labelling as very useful. Keyboard shortcuts combined with the feature rich app make labelling task slick and smooth. The application also features a task assignment and task process flow using which larger teams can collaborate by assigning tasks to a specific user and updating the current status of task for others to see. CVAT is developed considering the desktop based user interface, which means we need to keep expectations lower while trying to use it on mobile or tablets. You can try the app online right now by navigating to <a href="https://cvat.org">cvat.org</a> CVAT also features a command line interface which enables you to perform simple CRUD operations on task.</p>
</section>
<section id="data-extraction-upload" class="level2">
<h2 class="anchored" data-anchor-id="data-extraction-upload">Data Extraction/ Upload</h2>
<p>A Django app in backend and react UI as frontend, CVAT is quite covered with options to upload data via UI or CLI. App works on a unique task based system, each upload is created as a task in the system. The task can then be further assigned to different users for labelling, quality check, etc. When using the UI to upload data, you don’t need to worry about label formatting because the app takes care of it. CLI based upload requires data to be structured in specific formats before it can be processed. I recommend CLI to perform automated scripts based data upload and UI when actual human is performing the uplaod and labelling task.</p>
<p>Extraction of data is a very important step which will have to be performed by every team on regular basis. CVAT supports extraction of data in a format by both interfaces i.e.&nbsp;UI and CLI. A user can go to a task and there’s option to extract the data in various supported formats. when trying to extract multiple data points or tasks in CVAT, UI based extraction might seem time consuming . CLI comes to rescue here, extraction of data in any supported format is super simple using CLI. An important thing to note here is CVAT currently doesn’t support bulk extraction or upload of data using UI.</p>
<p>The dev team also mentiond about datumaro dataset framework which can be used to transform, merge, extract multiple datasets from CVAT. I was not able to get it working and therefore no comments on that.</p>
</section>
<section id="annotations-format-supported" class="level2">
<h2 class="anchored" data-anchor-id="annotations-format-supported">Annotations Format Supported</h2>
<p>I am borrowing a table available in CVAT documentation to show the formats supported. It supports all major community defined data label formats. The labels covers the spectrum of classification, obejct detection and segmentation tasks in computer vision.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Annotation format</th>
<th>Import</th>
<th>Export</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/jainds/cvat/blob/develop/cvat/apps/documentation/xml_format.md#annotation">CVAT for images</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="even">
<td><a href="https://github.com/jainds/cvat/blob/develop/cvat/apps/documentation/xml_format.md#interpolation">CVAT for a video</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/jainds/cvat/blob/develop/datumaro/README.md">Datumaro</a></td>
<td></td>
<td>X</td>
</tr>
<tr class="even">
<td><a href="http://host.robots.ox.ac.uk/pascal/VOC/">PASCAL VOC</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="odd">
<td>Segmentation masks from <a href="http://host.robots.ox.ac.uk/pascal/VOC/">PASCAL VOC</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="even">
<td><a href="https://pjreddie.com/darknet/yolo/">YOLO</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="odd">
<td><a href="http://cocodataset.org/#format-data">MS COCO Object Detection</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="even">
<td><a href="https://www.tensorflow.org/tutorials/load_data/tf_records">TFrecord</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="odd">
<td><a href="https://motchallenge.net/">MOT</a></td>
<td>X</td>
<td>X</td>
</tr>
<tr class="even">
<td><a href="http://labelme.csail.mit.edu/Release3.0">LabelMe 3.0</a></td>
<td>X</td>
<td>X</td>
</tr>
</tbody>
</table>
</section>
<section id="backup-and-restore" class="level2">
<h2 class="anchored" data-anchor-id="backup-and-restore">Backup and Restore</h2>
<p>All images/videos uploaded are stored in docker volume cvat_data and the respective label data is stored in postgres. Postgres data is stored in docker volume cvat_db. In order to backup the complete app data, you can simply create volume backup for these two volumes in form of .tar files. Configuring the said docker volumes to a persistent storage like S3 or azure blob would enable you to setup automated cloud backup for these volumes. Restoration is as simple as backup by using docker commands.</p>
</section>
<section id="community" class="level2">
<h2 class="anchored" data-anchor-id="community">Community</h2>
<p>CVAT community is available on <a href="https://github.com/opencv/cvat">GitHub</a> and <a href="https://gitter.im/opencv-cvat/public">Gitter</a>. I have personally found them responding faster on gitter compared to raising issues on github.</p>


</section>

 ]]></description>
  <category>annotation</category>
  <guid>https://piyush.dev/posts/2020-07-11-CVAT-All-you-need-to-know.html</guid>
  <pubDate>Sat, 11 Jul 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Deployment Journey of a Reinforcement Learning Algorithm</title>
  <dc:creator>Piyushkumar Jain</dc:creator>
  <link>https://piyush.dev/posts/devops/Deploying-RL-Model.html</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Our team is focused on enhancing user engagement and expanding our reach to a larger audience. One of the most effective ways to achieve this is through a well-designed mobile application, which already has millions of downloads.</p>
<p>Within the app, there is a dynamic carousel on the home page that displays banners. These banners serve multiple purposes, including providing information, facilitating communication, and highlighting key features of the app. Since this is the first page users see after registering, it plays a critical role in shaping their experience and guiding their interactions. A portion of users engage with these banners, while others explore the app through different paths.</p>
<p>Our goal is to better understand user engagement patterns—identifying what drives some users to interact with banners while others take different routes. By analyzing these behaviors, we aim to refine the user experience and optimize engagement within the app.</p>
</section>
<section id="problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="problem-statement">Problem statement</h2>
<p>The goal was to increase user engagement within the app by understanding user’s interest in a variety of banners and then leverage the results across the app.</p>
<p>we didn’t have existing data about user interaction with the app neither did we have enough time at hand to perform that activity. We were also looking at an incoming huge inflow of new users expected in near future due to the planned marketing campaigns. We were essentially looking at a cold start problem to improve engagement since, we would know little about the new users and time to market was a very important factor. We were expected to go live within two weeks duration with a solution to make the best out of data available at hand.</p>
</section>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<p>Bayesian bandits with Thomson sampling ticked all boxes as follows: 1. It requires no data or less to start with compared to other options 2. It will learn incoming users/data and start recommending banners 3. Can work with new banners configured as new arms</p>
<p>The next phase of the project was also discussed where we agreed to work on building contextual bandits. In this post, I will be talking more about how we used various tools and technology making deployment possible. I will not be talking about how the recommendation algorithm works and the technology stack used to achieve it.</p>
</section>
<section id="deployment" class="level2">
<h2 class="anchored" data-anchor-id="deployment">Deployment</h2>
<p><img src="https://piyush.dev/posts/images/deployment-journey-reinforcement-learning.png" class="img-fluid"></p>
<p>The build and deployment part of the project was broken down into two technical stages/phases: 1. Testing model and documenting results in the pre-prod environment with production data, define the input and the output schema for the model which will be used by the data engineer team to create a streaming pipeline. 2. Setup model to consume a live stream of event data, and respond via a REST endpoint with the recommended list of banners for the users</p>
<p>The front end of the mobile app is configured for a response time of one second w.r.t to back-end. It meant that the app will try to generate dynamic banners on the user screen based on our recommendations or fall back to static banners if we failed to deliver a response within a second, which added another layer of complexity to the second stage. Our APIs were expected to support a wide range of user load starting from a few hundred requests to millions across the region.</p>
<p>We could list the deployment infra into three major components: 1. A robust build and deployment pipeline 2. Automated performance testing 3. Production monitoring and alerting</p>
</section>
<section id="tools" class="level2">
<h2 class="anchored" data-anchor-id="tools">Tools</h2>
<p>Tools used for the complete setup: 1. Jenkins 2. Artifactory 3. Docker 4. Aquasec image scanning 5. Fortify static code scan 6. Sonar Nexus open source code scanning 7. Kubernetes 8. Predator 9. Prometheus 10. Grafana 11. Bitbucket</p>
<p>Our application solution is a bunch of docker images which consumes/produces content in Kafka topics.</p>
<section id="step-1-fetching-code-and-checking-for-changes" class="level3">
<h3 class="anchored" data-anchor-id="step-1-fetching-code-and-checking-for-changes">Step 1 — Fetching code and checking for changes</h3>
<p>Our pipeline starts at fetching the code from Bitbucket repository. We store code in the folder structure for the 4 different docker images that are to be built. We check whether a file has been changed before initiating build for the files in that folder. The code in the Jenkins pipeline is as below for one of the folders titled ‘generator’.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode groovy code-with-copy"><code class="sourceCode groovy"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb1-2">script<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">    GIT_RESULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>script<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''git diff --quiet HEAD </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$(git rev-parse @~1)</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -- generator'''</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">        returnStatus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb1-5">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-6">        echo \<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GIT RESULT -- </span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">${</span>GIT_RESULT<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -- </span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">${</span>params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>branchname<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="step-2---fortify" class="level3">
<h3 class="anchored" data-anchor-id="step-2---fortify">Step 2 - Fortify</h3>
<p>Next step is to run complete code static security scanning by Fortify</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  echo \"==================================================\"</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  echo \"========--- SAST - Fortify Scan: Start ---========\"</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  echo \"==================================================\"</span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  hostname</span></span>
<span id="cb2-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  whoami</span></span>
<span id="cb2-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ls -ahl</span></span>
<span id="cb2-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  echo '</span>WORKSPACE: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' $WORKSPACE</span></span>
<span id="cb2-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  cd $WORKSPACE</span></span>
<span id="cb2-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  pwd</span></span>
<span id="cb2-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  sourceanalyzer -v</span></span>
<span id="cb2-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  sourceanalyzer -b ${fortify_app_name} -clean</span></span>
<span id="cb2-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  sourceanalyzer -b ${fortify_app_name} -python-version ${python_version} -python-path ${python_path} ${fortify_scan_files}</span></span>
<span id="cb2-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  sourceanalyzer -b ${fortify_app_name} -scan -f ${fortify_app_name}.fpr</span></span>
<span id="cb2-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  fortifyclient -url https://sast.intranet.asia/ssc -authtoken \"${fortify_upload_token}\" uploadFPR -file ${fortify_app_name}.fpr -project ${fortify_app_name} -version ${fortify_app_version}</span></span>
<span id="cb2-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</section>
<section id="step-3---docker" class="level3">
<h3 class="anchored" data-anchor-id="step-3---docker">Step 3 - Docker</h3>
<p>The next step is to build the docker image. We first login to Artifactory before initiating the build as our pip libraries are also pulled from mirrored pip in the Artifactory. I have provided a sample of code on how we achieve this.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ARTIFACTORY_PASSWORD}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> | docker login -u </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ARTIFACTORY_USERNAME}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> --password-stdin docker-registry:8443</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cd generator</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    docker build --file Docker-dev </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     --build-arg HTTPS_PROXY=http://ip-address </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     --build-arg ARTIFACTORY_USERNAME=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ARTIFACTORY_USERNAME}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb3-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     --build-arg ARTIFACTORY_PASSWORD=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${ARTIFACTORY_PASSWORD}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb3-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     -t </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_latest</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb3-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    docker tag </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_latest</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_name</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    docker push </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_latest</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    docker push </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_name</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    docker logout docker-repo-path</span></span>
<span id="cb3-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cd ..</span></span>
<span id="cb3-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
</section>
<section id="step-4---aquasec" class="level3">
<h3 class="anchored" data-anchor-id="step-4---aquasec">Step 4 - Aquasec</h3>
<p>After pushing an image into Artifactory, the next important and mandatory step to be performed is docker image security scanning.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">==================================================</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=============--- OSS - Nexus Scan ---=============</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">==================================================</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            docker save -o generator-dev.tar </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_latest</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span></span>
<span id="cb4-8">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">String</span> result = nexusscan<span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">\"pcaaicoeaipulsenudgesgeneratordev\",</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$WORKSPACE</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>, <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span>build<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">);</span></span>
<span id="cb4-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> result<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">;</span></span>
<span id="cb4-10">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            rm -f generator-dev.tar</span></span>
<span id="cb4-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            """</span></span>
<span id="cb4-13">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">==================================================</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=============--- CSEC - Aquasec Scan ---==========</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            echo </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">==================================================</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span></span>
<span id="cb4-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-18">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">aquasecscan</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">\"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${env</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.generator_image_latest</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">}</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">")</span></span></code></pre></div>
<p>The code and image security scanning stages are major milestones to be cleared during the deployment phase. It is important as well as difficult to explain and agree between application security teams about what risks are we willing to take while allowing open source libraries with bugs to go live in our environment.</p>
</section>
<section id="step-5-kubernetes" class="level3">
<h3 class="anchored" data-anchor-id="step-5-kubernetes">Step 5 — Kubernetes</h3>
<p>Now we move on to the stage where we will be able to actually deploy and run our images. In order to deploy our solution, we need a Redis DB and Kafka cluster up and running. We deploy our docker images using the below code:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    set +x</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- preparing options ----\"</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export HTTPS_PROXY=ip-address:8080</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KUBE_NAMESPACE=\"internal-namespace\"</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --kubeconfig=${KUBE_CONFIG}\"</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --insecure-skip-tls-verify=true\"</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --namespace=${KUBE_NAMESPACE}\"</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- prepared options ----\"</span></span>
<span id="cb5-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- preparing alias ----\"</span></span>
<span id="cb5-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    alias kc=\"kubectl ${KC_OPTS} $*\"</span></span>
<span id="cb5-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- alias prepared ----\"</span></span>
<span id="cb5-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- applying manifest ----\"</span></span>
<span id="cb5-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb5-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   kc apply -f configmap.yaml</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   if [ $which_app = \"generator\" ];then</span></span>
<span id="cb5-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     if [ $image_version = \"latest\" ];then</span></span>
<span id="cb5-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       kc delete deploy ai-pulse-nudges-events-reader||echo</span></span>
<span id="cb5-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     fi</span></span>
<span id="cb5-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!GENERATOR_VERSION!$image_version!g\" \"generator.yaml\"</span></span>
<span id="cb5-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f generator.yaml</span></span>
<span id="cb5-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   fi  </span></span>
<span id="cb5-27"></span>
<span id="cb5-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   if [ $which_app = \"aggregator\" ];then</span></span>
<span id="cb5-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     if [ $image_version = \"latest\" ];then</span></span>
<span id="cb5-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       kc delete deploy ai-pulse-nudges-click-counter||echo</span></span>
<span id="cb5-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     fi</span></span>
<span id="cb5-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!AGGREGATOR_VERSION!$image_version!g\" \"aggregator.yaml\"</span></span>
<span id="cb5-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f aggregator.yaml</span></span>
<span id="cb5-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   fi</span></span>
<span id="cb5-35"></span>
<span id="cb5-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   if [ $which_app = \"detector\" ];then</span></span>
<span id="cb5-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     if [ $image_version = \"latest\" ];then</span></span>
<span id="cb5-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       kc delete deploy ai-pulse-nudges-engine||echo</span></span>
<span id="cb5-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     fi</span></span>
<span id="cb5-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!DETECTOR_VERSION!$image_version!g\" \"detector.yaml\" </span></span>
<span id="cb5-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f detector.yaml</span></span>
<span id="cb5-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   fi</span></span>
<span id="cb5-43"></span>
<span id="cb5-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   if [ $which_app = \"restapi\" ];then</span></span>
<span id="cb5-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     if [ $image_version = \"latest\" ];then</span></span>
<span id="cb5-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       kc delete deploy ai-pulse-nudges-restapi||echo</span></span>
<span id="cb5-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        fi</span></span>
<span id="cb5-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!REST_VERSION!$image_version!g\" \"restapi.yaml\"</span></span>
<span id="cb5-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f restapi.yaml</span></span>
<span id="cb5-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            fi</span></span>
<span id="cb5-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if [ $which_app = \"all\" ];then</span></span>
<span id="cb5-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     if [ $image_version = \"latest\" ];then</span></span>
<span id="cb5-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc delete deploy ai-pulse-nudges-events-reader||echo</span></span>
<span id="cb5-54"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc delete deploy ai-pulse-nudges-click-counter||echo</span></span>
<span id="cb5-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc delete deploy ai-pulse-nudges-engine||echo</span></span>
<span id="cb5-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc delete deploy ai-pulse-nudges-restapi||echo</span></span>
<span id="cb5-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     fi</span></span>
<span id="cb5-58"></span>
<span id="cb5-59"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!GENERATOR_VERSION!$image_version!g\" \"generator.yaml\"</span></span>
<span id="cb5-60"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!AGGREGATOR_VERSION!$image_version!g\" \"aggregator.yaml\"</span></span>
<span id="cb5-61"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!DETECTOR_VERSION!$image_version!g\" \"detector.yaml\" </span></span>
<span id="cb5-62"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!REST_VERSION!$image_version!g\" \"restapi.yaml\"</span></span>
<span id="cb5-63"></span>
<span id="cb5-64"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f generator.yaml</span></span>
<span id="cb5-65"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f aggregator.yaml</span></span>
<span id="cb5-66"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f detector.yaml</span></span>
<span id="cb5-67"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f restapi.yaml</span></span>
<span id="cb5-68"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            fi</span></span>
<span id="cb5-69"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb5-70"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb5-71"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb5-72"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- manifest applied ----\"</span></span>
<span id="cb5-73"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- checking result ----\"</span></span>
<span id="cb5-74"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-75"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Deployments \"</span></span>
<span id="cb5-76"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get deployments</span></span>
<span id="cb5-77"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-78"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Services\"</span></span>
<span id="cb5-79"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get svc</span></span>
<span id="cb5-80"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-81"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Ingress\"</span></span>
<span id="cb5-82"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get ingress</span></span>
<span id="cb5-83"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-84"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Pods\"</span></span>
<span id="cb5-85"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get pods</span></span>
<span id="cb5-86"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-87"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- Done ----\"</span></span>
<span id="cb5-88"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</section>
<section id="step-6-performance-test" class="level3">
<h3 class="anchored" data-anchor-id="step-6-performance-test">Step 6 — Performance test</h3>
<p>We deploy Predator — the tool which we use for performance test.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">//hide_output</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    set +x</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- preparing options ----\"</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export HTTPS_PROXY=ip-address:8080</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KUBE_NAMESPACE=\"internal-namespace\"</span></span>
<span id="cb6-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --kubeconfig=${KUBE_CONFIG}\"</span></span>
<span id="cb6-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --insecure-skip-tls-verify=true\"</span></span>
<span id="cb6-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    export KC_OPTS=${KC_OPTS}\" --namespace=${KUBE_NAMESPACE}\"</span></span>
<span id="cb6-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- prepared options ----\"</span></span>
<span id="cb6-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- preparing alias ----\"</span></span>
<span id="cb6-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    alias kc=\"kubectl ${KC_OPTS} $*\"</span></span>
<span id="cb6-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- alias prepared ----\"</span></span>
<span id="cb6-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- applying manifest ----\"</span></span>
<span id="cb6-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb6-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   kc get deploy|grep predator|awk '</span>{print <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span> }<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' || echo</span></span>
<span id="cb6-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   kc get deploy|grep predator|awk '</span>{print <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span> }<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|xargs kc delete deploy || echo</span></span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   for i in `seq $replica_count`</span></span>
<span id="cb6-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   do</span></span>
<span id="cb6-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     echo $i</span></span>
<span id="cb6-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     cp -rf predator/predator.yaml tmp.yaml</span></span>
<span id="cb6-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     sed -i \"s!REPLICA_NO!$i\"\"!g\" \"tmp.yaml\"</span></span>
<span id="cb6-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">     kc apply -f tmp.yaml</span></span>
<span id="cb6-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   done  </span></span>
<span id="cb6-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb6-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb6-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    # kc apply -f predator/predator.yaml</span></span>
<span id="cb6-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- manifest applied ----\"</span></span>
<span id="cb6-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- checking result ----\"</span></span>
<span id="cb6-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Deployments \"</span></span>
<span id="cb6-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get deployments</span></span>
<span id="cb6-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Services\"</span></span>
<span id="cb6-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get svc</span></span>
<span id="cb6-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Ingress\"</span></span>
<span id="cb6-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get ingress</span></span>
<span id="cb6-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \" &gt;&gt; Pods\"</span></span>
<span id="cb6-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    kc get pods</span></span>
<span id="cb6-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    echo \"---- Done ----\"</span></span>
<span id="cb6-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
<p>Predator is an amazing tool that enables us to leverage existing Kubernetes infra for an unlimited number of users for testing. Read more about the tool here: https://medium.com/zooz-engineering/by-niv-lipetz-software-engineer-zooz-b5928da0b7a8 We leverage the existing enterprise Prometheus and Grafana set up to monitor the application pods.</p>
</section>
</section>
<section id="lessons-learned-for-next-time" class="level2">
<h2 class="anchored" data-anchor-id="lessons-learned-for-next-time">Lessons learned for next time:</h2>
<ol type="1">
<li>We started writing the pipeline code from scratch, whereas it would have helped save time if an advanced hello world type of empty pipeline existed, which could be used as a template structure. It would have enabled us to know what credentials and access were required at what stage.</li>
<li>There were many credentials and access that were required to get the pipeline up and running. It would be a time and effort savior if we have one master service id created and assigned to a pipeline which can then be used across all tools in the organization.</li>
<li>It is very difficult to build a machine learning model, and real-time streaming data was an additional complexity, but productionizing that model with streaming data is many folds difficult.</li>
</ol>
</section>
<section id="contributors" class="level2">
<h2 class="anchored" data-anchor-id="contributors">Contributors</h2>
<p>Glenn Bayne, Tien Nguyet Long, John Yue, Zeldon Tay （郑育忠), Steven Chau , Denys Pang , Philipp Gschoepf , Syam Bandi , Uma Maheshwari, Michael Natusch</p>


</section>

 ]]></description>
  <category>deployment</category>
  <guid>https://piyush.dev/posts/devops/Deploying-RL-Model.html</guid>
  <pubDate>Tue, 07 Jul 2020 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
