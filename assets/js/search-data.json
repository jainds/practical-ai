{
  
    
        "post0": {
            "title": "All you need to know about CVAT",
            "content": "Introduction . Once you start your journey into data science, you quickly learn that as part of your job you are spending more time with data than models. Data and labels go hand in hand and hence, I will be sharing what you need to know before you decide to use CVAT as your image/video annotation tool. . Ease of Setup . A treat awaits in this section if you have worked with docker compose before, CVAT is very easy to setup as the source code contains necessary docker compose files which makes complete setup a breeze in your local. Repo also features an instruction documentation which is comprehensively written and covers every line of code that needs to be executed in order to get the tool running. . Complete setup is nicely segregated into docker-compose files with docker apps named cvat,cvat_ui, cvat_db. There are two ways to go ahead with setting up the tool, the easier way of deploying it in a VM and a little longer way on Kubernetes. A VM with enough firepower to run an instance of Postgres, Django backend and a react app to support the number of users that you expect to access the tool simultaneously should be alright. An example: I was able to support 200+ users(some of them were automated scripts) in a single VM with the analytics component running using a Standard D5 v2 (16 vcpus, 56 GiB memory) Azure VM. The power of your VM needs to be proportionately increased if you wish to use the additional components like deep learning model based auto labelling. If you choose to deploy the tool in Kubernetes, you could benefit from the auto-scaling functionality for each app inside CVAT. Kubernetes YAML files are not available as part of source code and hence you might need to create them yourself. I recommend Kompose to create Kubrnetes YAML from docker compose files. Scalability is an important aspect while considering a tool for production deployment. In order to make sure that the tool works for foreseeable growth in number of users. App can be scaled easily since everything is nicely wrapped into docker containers. . Ease of Usage . The application’s desktop UI although not fancy, is very feature rich and achieves the goal of labeling images and videos with ease.There’s a long list of keyboard shortcuts supported and you don’t necessarily need to remember every shortcut, simply pick and choose which help you speed up. I found the shortcut to create poly shapes and rectangles during labelling as very useful. Keyboard shortcuts combined with the feature rich app make labelling task slick and smooth. The application also features a task assignment and task process flow using which larger teams can collaborate by assigning tasks to a specific user and updating the current status of task for others to see. CVAT is developed considering the desktop based user interface, which means we need to keep expectations lower while trying to use it on mobile or tablets. You can try the app online right now by navigating to cvat.org CVAT also features a command line interface which enables you to perform simple CRUD operations on task. . Data Extraction/ Upload . A Django app in backend and react UI as frontend, CVAT is quite covered with options to upload data via UI or CLI. App works on a unique task based system, each upload is created as a task in the system. The task can then be further assigned to different users for labelling, quality check, etc. When using the UI to upload data, you don’t need to worry about label formatting because the app takes care of it. CLI based upload requires data to be structured in specific formats before it can be processed. I recommend CLI to perform automated scripts based data upload and UI when actual human is performing the uplaod and labelling task. . Extraction of data is a very important step which will have to be performed by every team on regular basis. CVAT supports extraction of data in a format by both interfaces i.e. UI and CLI. A user can go to a task and there’s option to extract the data in various supported formats. when trying to extract multiple data points or tasks in CVAT, UI based extraction might seem time consuming . CLI comes to rescue here, extraction of data in any supported format is super simple using CLI. An important thing to note here is CVAT currently doesn’t support bulk extraction or upload of data using UI. . The dev team also mentiond about datumaro dataset framework which can be used to transform, merge, extract multiple datasets from CVAT. I was not able to get it working and therefore no comments on that. . Annotations Format Supported . I am borrowing a table available in CVAT documentation to show the formats supported. It supports all major community defined data label formats. The labels covers the spectrum of classification, obejct detection and segmentation tasks in computer vision. . Annotation format Import Export . CVAT for images | X | X | . CVAT for a video | X | X | . Datumaro |   | X | . PASCAL VOC | X | X | . Segmentation masks from PASCAL VOC | X | X | . YOLO | X | X | . MS COCO Object Detection | X | X | . TFrecord | X | X | . MOT | X | X | . LabelMe 3.0 | X | X | . Backup and Restore . All images/videos uploaded are stored in docker volume cvat_data and the respective label data is stored in postgres. Postgres data is stored in docker volume cvat_db. In order to backup the complete app data, you can simply create volume backup for these two volumes in form of .tar files. Configuring the said docker volumes to a persistent storage like S3 or azure blob would enable you to setup automated cloud backup for these volumes. Restoration is as simple as backup by using docker commands. . Community . CVAT community is available on GitHub and Gitter. I have personally found them responding faster on gitter compared to raising issues on github. .",
            "url": "https://piyush.dev/annotation/2020/07/11/CVAT-All-you-need-to-know.html",
            "relUrl": "/annotation/2020/07/11/CVAT-All-you-need-to-know.html",
            "date": " • Jul 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Deployment Journey of a Reinforcement Learning Algorithm",
            "content": "Introduction . Our team is working to improve the health and wealth of millions of current customers and acquire more customers in the future. One of the most effective and efficient way to achieve our goal is by getting an app into the millions of people. As it turns out, we already have a wonderful application which is downloaded by more than 3 million users as I write this post. The mobile application has a carousel portion in the bottom half section of the home page where dynamic banners can be rendered. Each banner is utilized as a form of information, communication medium or an application feature. This is the first page that is seen by all users who successfully register and a portion of them clicking on the banner displayed registering their interest. Our team&#39;s goal is to increase engagement within the app. The first step was to understand the source of users who were clicking the banners, why are they willing to go into exploring app via banners after registering while others would go on to explore the app via other routes. . Problem statement . The goal was to increase user engagement within the app by understanding user’s interest in a variety of banners and then leverage the results across the app. . we didn’t have existing data about user interaction with the app neither did we have enough time at hand to perform that activity. We were also looking at an incoming huge inflow of new users expected in near future due to the planned marketing campaigns. We were essentially looking at a cold start problem to improve engagement since, we would know little about the new users and time to market was a very important factor. We were expected to go live within two weeks duration with a solution to make the best out of data available at hand. . Solution . Bayesian bandits with Thomson sampling ticked all boxes as follows: . It requires no data or less to start with compared to other options | It will learn incoming users/data and start recommending banners | Can work with new banners configured as new arms | The next phase of the project was also discussed where we agreed to work on building contextual bandits. In this post, I will be talking more about how we used various tools and technology making deployment possible. I will not be talking about how the recommendation algorithm works and the technology stack used to achieve it. . Deployment . . The build and deployment part of the project was broken down into two technical stages/phases: . Testing model and documenting results in the pre-prod environment with production data, define the input and the output schema for the model which will be used by the data engineer team to create a streaming pipeline. | Setup model to consume a live stream of event data, and respond via a REST endpoint with the recommended list of banners for the users | The front end of the mobile app is configured for a response time of one second w.r.t to back-end. It meant that the app will try to generate dynamic banners on the user screen based on our recommendations or fall back to static banners if we failed to deliver a response within a second, which added another layer of complexity to the second stage. Our APIs were expected to support a wide range of user load starting from a few hundred requests to millions across the region. . We could list the deployment infra into three major components: . A robust build and deployment pipeline | Automated performance testing | Production monitoring and alerting | Tools . Tools used for the complete setup: . Jenkins | Artifactory | Docker | Aquasec image scanning | Fortify static code scan 6.. Sonar Nexus open source code scanning | Kubernetes | Predator | Prometheus | Grafana | Bitbucket | Our application solution is a bunch of docker images which consumes/produces content in Kafka topics. . Step 1 &#8212; Fetching code and checking for changes . Our pipeline starts at fetching the code from Bitbucket repository. We store code in the folder structure for the 4 different docker images that are to be built. We check whether a file has been changed before initiating build for the files in that folder. The code in the Jenkins pipeline is as below for one of the folders titled ‘generator’. . #hide_output script{ GIT_RESULT = sh(script: &#39;&#39;&#39;git diff --quiet HEAD &quot;$(git rev-parse @~1)&quot; -- generator&#39;&#39;&#39;, returnStatus: true ) echo &quot;GIT RESULT -- ${GIT_RESULT} -- ${params.branchname}&quot; } . Step 2 - Fortify . Next step is to run complete code static security scanning by Fortify . #hide_output sh &#39;&#39;&#39; echo &quot;==================================================&quot; echo &quot;======== SAST - Fortify Scan: Start ========&quot; echo &quot;==================================================&quot; hostname whoami ls -ahl echo &#39;WORKSPACE: &#39; $WORKSPACE cd $WORKSPACE pwd sourceanalyzer -v sourceanalyzer -b ${fortify_app_name} -clean sourceanalyzer -b ${fortify_app_name} -python-version ${python_version} -python-path ${python_path} ${fortify_scan_files} sourceanalyzer -b ${fortify_app_name} -scan -f ${fortify_app_name}.fpr fortifyclient -url https://sast.intranet.asia/ssc -authtoken &quot;${fortify_upload_token}&quot; uploadFPR -file ${fortify_app_name}.fpr -project ${fortify_app_name} -version ${fortify_app_version} &#39;&#39;&#39; . Step 3 - Docker . The next step is to build the docker image. We first login to Artifactory before initiating the build as our pip libraries are also pulled from mirrored pip in the Artifactory. I have provided a sample of code on how we achieve this. . #hide_output sh &quot;&quot;&quot; echo ${ARTIFACTORY_PASSWORD} | docker login -u ${ARTIFACTORY_USERNAME} --password-stdin docker-registry:8443 cd generator docker build --file Docker-dev --build-arg HTTPS_PROXY=http://ip-address --build-arg ARTIFACTORY_USERNAME=${ARTIFACTORY_USERNAME} --build-arg ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD} -t ${env.generator_image_latest} . docker tag ${env.generator_image_latest} ${env.generator_image_name} docker push ${env.generator_image_latest} docker push ${env.generator_image_name} docker logout docker-pcaaicoe.pruregistry.intranet.asia:8443 cd .. &quot;&quot;&quot; . Step 4 - Aquasec . After pushing an image into Artifactory, the next important and mandatory step to be performed is docker image security scanning. . #hide_output sh &quot;&quot;&quot; echo &quot;==================================================&quot; echo &quot;============= OSS - Nexus Scan =============&quot; echo &quot;==================================================&quot; docker save -o generator-dev.tar ${env.generator_image_latest} &quot;&quot;&quot; String result = nexusscan(&quot;pcaaicoeaipulsenudgesgeneratordev&quot;, &quot;$WORKSPACE&quot;, &quot;build&quot;); echo result; sh &quot;&quot;&quot; rm -f generator-dev.tar &quot;&quot;&quot; sh &quot;&quot;&quot; echo &quot;==================================================&quot; echo &quot;============= CSEC - Aquasec Scan ==========&quot; echo &quot;==================================================&quot; &quot;&quot;&quot; aquasecscan(&quot;${env.generator_image_latest}&quot;) . The code and image security scanning stages are major milestones to be cleared during the deployment phase. It is important as well as difficult to explain and agree between application security teams about what risks are we willing to take while allowing open source libraries with bugs to go live in our environment. . Step 5 &#8212; Kubernetes . Now we move on to the stage where we will be able to actually deploy and run our images. In order to deploy our solution, we need a Redis DB and Kafka cluster up and running. We deploy our docker images using the below code: . #hide_output sh &#39;&#39;&#39; set +x echo &quot;- preparing options -&quot; export HTTPS_PROXY=ip-address:8080 export KUBE_NAMESPACE=&quot;internal-namespace&quot; export KC_OPTS=${KC_OPTS}&quot; --kubeconfig=${KUBE_CONFIG}&quot; export KC_OPTS=${KC_OPTS}&quot; --insecure-skip-tls-verify=true&quot; export KC_OPTS=${KC_OPTS}&quot; --namespace=${KUBE_NAMESPACE}&quot; echo &quot;- prepared options -&quot; echo &quot;- preparing alias -&quot; alias kc=&quot;kubectl ${KC_OPTS} $*&quot; echo &quot;- alias prepared -&quot; echo &quot;- applying manifest -&quot; kc apply -f configmap.yaml if [ $which_app = &quot;generator&quot; ];then if [ $image_version = &quot;latest&quot; ];then kc delete deploy ai-pulse-nudges-events-reader||echo fi sed -i &quot;s!GENERATOR_VERSION!$image_version!g&quot; &quot;generator.yaml&quot; kc apply -f generator.yaml fi if [ $which_app = &quot;aggregator&quot; ];then if [ $image_version = &quot;latest&quot; ];then kc delete deploy ai-pulse-nudges-click-counter||echo fi sed -i &quot;s!AGGREGATOR_VERSION!$image_version!g&quot; &quot;aggregator.yaml&quot; kc apply -f aggregator.yaml fi if [ $which_app = &quot;detector&quot; ];then if [ $image_version = &quot;latest&quot; ];then kc delete deploy ai-pulse-nudges-engine||echo fi sed -i &quot;s!DETECTOR_VERSION!$image_version!g&quot; &quot;detector.yaml&quot; kc apply -f detector.yaml fi if [ $which_app = &quot;restapi&quot; ];then if [ $image_version = &quot;latest&quot; ];then kc delete deploy ai-pulse-nudges-restapi||echo fi sed -i &quot;s!REST_VERSION!$image_version!g&quot; &quot;restapi.yaml&quot; kc apply -f restapi.yaml fi if [ $which_app = &quot;all&quot; ];then if [ $image_version = &quot;latest&quot; ];then kc delete deploy ai-pulse-nudges-events-reader||echo kc delete deploy ai-pulse-nudges-click-counter||echo kc delete deploy ai-pulse-nudges-engine||echo kc delete deploy ai-pulse-nudges-restapi||echo fi sed -i &quot;s!GENERATOR_VERSION!$image_version!g&quot; &quot;generator.yaml&quot; sed -i &quot;s!AGGREGATOR_VERSION!$image_version!g&quot; &quot;aggregator.yaml&quot; sed -i &quot;s!DETECTOR_VERSION!$image_version!g&quot; &quot;detector.yaml&quot; sed -i &quot;s!REST_VERSION!$image_version!g&quot; &quot;restapi.yaml&quot; kc apply -f generator.yaml kc apply -f aggregator.yaml kc apply -f detector.yaml kc apply -f restapi.yaml fi echo &quot;- manifest applied -&quot; echo &quot;- checking result -&quot; echo &quot; &gt;&gt; Deployments &quot; kc get deployments echo &quot; &gt;&gt; Services&quot; kc get svc echo &quot; &gt;&gt; Ingress&quot; kc get ingress echo &quot; &gt;&gt; Pods&quot; kc get pods echo &quot;- Done -&quot; &#39;&#39;&#39; . Step 6 &#8212; Performance test . We deploy Predator — the tool which we use for performance test. . #hide_output sh &#39;&#39;&#39; set +x echo &quot;- preparing options -&quot; export HTTPS_PROXY=ip-address:8080 export KUBE_NAMESPACE=&quot;internal-namespace&quot; export KC_OPTS=${KC_OPTS}&quot; --kubeconfig=${KUBE_CONFIG}&quot; export KC_OPTS=${KC_OPTS}&quot; --insecure-skip-tls-verify=true&quot; export KC_OPTS=${KC_OPTS}&quot; --namespace=${KUBE_NAMESPACE}&quot; echo &quot;- prepared options -&quot; echo &quot;- preparing alias -&quot; alias kc=&quot;kubectl ${KC_OPTS} $*&quot; echo &quot;- alias prepared -&quot; echo &quot;- applying manifest -&quot; kc get deploy|grep predator|awk &#39;{print $1 }&#39; || echo kc get deploy|grep predator|awk &#39;{print $1 }&#39;|xargs kc delete deploy || echo for i in `seq $replica_count` do echo $i cp -rf predator/predator.yaml tmp.yaml sed -i &quot;s!REPLICA_NO!$i&quot;&quot;!g&quot; &quot;tmp.yaml&quot; kc apply -f tmp.yaml done # kc apply -f predator/predator.yaml echo &quot;- manifest applied -&quot; echo &quot;- checking result -&quot; echo &quot; &gt;&gt; Deployments &quot; kc get deployments echo &quot; &gt;&gt; Services&quot; kc get svc echo &quot; &gt;&gt; Ingress&quot; kc get ingress echo &quot; &gt;&gt; Pods&quot; kc get pods echo &quot;- Done -&quot; &#39;&#39;&#39; . Predator is an amazing tool that enables us to leverage existing Kubernetes infra for an unlimited number of users for testing. Read more about the tool here: https://medium.com/zooz-engineering/by-niv-lipetz-software-engineer-zooz-b5928da0b7a8 We leverage the existing enterprise Prometheus and Grafana set up to monitor the application pods. . Lessons learned for next time: . We started writing the pipeline code from scratch, whereas it would have helped save time if an advanced hello world type of empty pipeline existed, which could be used as a template structure. It would have enabled us to know what credentials and access were required at what stage. | There were many credentials and access that were required to get the pipeline up and running. It would be a time and effort savior if we have one master service id created and assigned to a pipeline which can then be used across all tools in the organization. | It is very difficult to build a machine learning model, and real-time streaming data was an additional complexity, but productionizing that model with streaming data is many folds difficult. | Contributors . Glenn Bayne, Tien Nguyet Long, John Yue, Zeldon Tay （郑育忠), Steven Chau , Denys Pang , Philipp Gschoepf , Syam Bandi , Uma Maheshwari, Michael Natusch .",
            "url": "https://piyush.dev/deployment/2020/07/07/Deploying-RL-Model.html",
            "relUrl": "/deployment/2020/07/07/Deploying-RL-Model.html",
            "date": " • Jul 7, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://piyush.dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://piyush.dev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi there, Welcome to Piyush.Dev . I am a data scientist who enjoys playing with new technologies and identify possible use cases in the real world. . I am an engineer by qualification, turned to data science by sheer nature of curiosity. . I like learning new things and sharing here. . Welcome to my site. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://piyush.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://piyush.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}